from requests import post, get
from typing import Literal
from time import sleep
from threading import Thread, Lock
from colorama import Fore
from datetime import datetime, timedelta
from os import system as sys
from platform import system as s_name
from itertools import cycle
from urllib.parse import unquote
from random import randint

from Core.Tools.HPV_Getting_File_Paths import HPV_Get_Accounts
from Core.Tools.HPV_Proxy import HPV_Proxy_Checker
from Core.Tools.HPV_User_Agent import HPV_User_Agent







class HPV_PocketFi:
    '''
    AutoBot Ferma /// HPV
    ---------------------
    [1] - `–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã`
    
    [2] - `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Telegram`
    
    [3] - `–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Twitter`
    
    [4] - `–°–±–æ—Ä –º–æ–Ω–µ—Ç`
    
    [5] - `–û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 5 –¥–æ 6 —á–∞—Å–æ–≤`
    
    [6] - `–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π —á–µ—Ä–µ–∑ 5-6 —á–∞—Å–æ–≤`
    '''



    def __init__(self, Name: str, URL: str, Proxy: dict) -> None:
        self.Name = Name                   # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
        self.Token = self.URL_Clean(URL)   # –£–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞-—Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ mini app
        self.Proxy = Proxy                 # –ü—Ä–æ–∫—Å–∏ (–ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏)
        self.UA = HPV_User_Agent()         # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ User Agent



    def URL_Clean(self, URL: str) -> str:
        '''–û—á–∏—Å—Ç–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –æ—Ç –ª–∏—à–Ω–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤'''

        try:
            return unquote(URL.split('#tgWebAppData=')[1].split('&tgWebAppVersion')[0])
        except:
            return ''



    def Current_Time(self) -> str:
        '''–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è'''

        return Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'



    def Logging(self, Type: Literal['Success', 'Warning', 'Error'], Name: str, Smile: str, Text: str) -> None:
        '''–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'''

        with Console_Lock:
            COLOR = Fore.GREEN if Type == 'Success' else Fore.YELLOW if Type == 'Warning' else Fore.RED # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
            DIVIDER = Fore.BLACK + ' | '   # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

            Time = self.Current_Time()     # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
            Name = Fore.MAGENTA + Name     # –ù–∏–∫ –∞–∫–∫–∞—É–Ω—Ç–∞
            Smile = COLOR + str(Smile)     # –°–º–∞–π–ª–∏–∫
            Text = COLOR + Text            # –¢–µ–∫—Å—Ç –ª–æ–≥–∞

            print(Time + DIVIDER + Smile + DIVIDER + Text + DIVIDER + Name)



    def Get_Info(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–∞–π–Ω–∏–Ω–≥–∞'''

        URL = 'https://bot.pocketfi.org/mining/getUserMining'
        Headers = {'Connection': 'keep-alive', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'telegramRawData': self.Token, 'sec-ch-ua-mobile': '?1', 'User-Agent': self.UA, 'sec-ch-ua-platform': 'Android', 'Accept': '*/*', 'Origin': 'https://pocketfi.app', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'cross-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'https://pocketfi.app/', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            HPV = get(URL, headers=Headers, proxies=self.Proxy).json()['userMining']

            Speed = HPV['speed'] # –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –≤ —á–∞—Å
            Balance = HPV['gotAmount'] # –ë–∞–ª–∞–Ω—Å
            Mined = HPV['miningAmount'] # –ù–∞–º–∞–π–Ω–µ–Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç

            return {'Status': True, 'Speed': Speed, 'Balance': f'{Balance:,.2f}', 'Mined': f'{Mined:,.2f}'}
        except:
            return {'Status': False}



    def Daily_Reward(self) -> dict:
        '''–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã'''

        URL = 'https://rubot.pocketfi.org/boost/activateDailyBoost'
        Headers = {'Connection': 'keep-alive', 'Content-Length': '0', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'telegramRawData': self.Token, 'sec-ch-ua-mobile': '?1', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Accept': '*/*', 'Origin': 'https://pocketfi.app', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'cross-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'https://pocketfi.app/', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        Reward = {'1': 1, '2': 1, '3': 2, '4': 3, '5': 5, '6': 8, '7': 13, '8': 21, '9': 34, '10': 55}

        try:
            HPV = post(URL, headers=Headers, proxies=self.Proxy).json()['updatedForDay']

            if HPV == None:
                return {'Status': False}
            else:
                return {'Status': True, 'Reward': Reward[str(HPV + 1)]}
        except:
            return {'Status': False}



    def Run_Tasks(self, Task: Literal['telegram', 'twitter']) -> bool:
        '''–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏'''

        URL = 'https://rubot.pocketfi.org/confirmSubscription'
        Headers = {'Connection': 'keep-alive', 'Content-Length': '30', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'Content-Type': 'text/plain;charset=UTF-8', 'telegramRawData': self.Token, 'sec-ch-ua-mobile': '?1', 'User-Agent': self.UA, 'sec-ch-ua-platform': '"Android"', 'Accept': '*/*', 'Origin': 'https://pocketfi.app', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'cross-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'https://pocketfi.app/', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}
        Data = '{"subscriptionType":"' + Task + '"}'

        try:
            if post(URL, headers=Headers, data=Data, proxies=self.Proxy).json()['ok']:
                return True
            else:
                return False
        except:
            return False



    def Claim(self) -> None:
        '''–°–±–æ—Ä –º–æ–Ω–µ—Ç'''

        URL = 'https://bot.pocketfi.org/mining/claimMining'
        Headers = {'Connection': 'keep-alive', 'Content-Length': '0', 'sec-ch-ua': '"Chromium";v="122", "Not(A:Brand";v="24", "Android WebView";v="122"', 'telegramRawData': self.Token, 'sec-ch-ua-mobile': '?1', 'User-Agent': self.Token, 'sec-ch-ua-platform': 'Android', 'Accept': '*/*', 'Origin': 'https://pocketfi.app', 'X-Requested-With': 'org.telegram.plus', 'Sec-Fetch-Site': 'cross-site', 'Sec-Fetch-Mode': 'cors', 'Sec-Fetch-Dest': 'empty', 'Referer': 'https://pocketfi.app/', 'Accept-Encoding': 'gzip, deflate, br', 'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7'}

        try:
            Mined = self.Get_Info()["Mined"]
            post(URL, headers=Headers, proxies=self.Proxy).json()['userMining']['speed']
            self.Logging('Success', self.Name, 'üü¢', f'–ú–æ–Ω–µ—Ç—ã —Å–æ–±—Ä–∞–Ω—ã! +{Mined}')
        except:
            self.Logging('Error', self.Name, 'üî¥', '–ú–æ–Ω–µ—Ç—ã –Ω–µ —Å–æ–±—Ä–∞–Ω—ã!')



    def Run(self) -> None:
        '''–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞'''

        while True:
            try:
                if self.Get_Info()['Status']:
                    self.Logging('Success', self.Name, 'üü¢', '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!')
                    INFO = self.Get_Info()


                    Balance = INFO['Balance'] # –ë–∞–ª–∞–Ω—Å
                    Speed = INFO['Speed'] # –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –≤ —á–∞—Å


                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Balance} /// –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: {Speed}')


                    # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
                    Daily_Reward = self.Daily_Reward()
                    if Daily_Reward['Status']:
                        self.Logging('Success', self.Name, 'üéÅ', f'–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞! +{Daily_Reward["Reward"]}')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Telegram
                    if self.Run_Tasks('telegram'):
                        self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ó–∞–¥–∞–Ω–∏–µ —Å Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ

                    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ Twitter
                    if self.Run_Tasks('twitter'):
                        self.Logging('Success', self.Name, '‚ö°Ô∏è', '–ó–∞–¥–∞–Ω–∏–µ —Å Twitter (–•) –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ —É–≤–µ–ª–∏—á–µ–Ω–∞!')
                        sleep(randint(33, 103)) # –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


                    self.Claim() # –°–±–æ—Ä –º–æ–Ω–µ—Ç


                    INFO = self.Get_Info()
                    Balance = INFO['Balance'] # –ë–∞–ª–∞–Ω—Å
                    Speed = INFO['Speed'] # –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞ –≤ —á–∞—Å
                    self.Logging('Success', self.Name, 'üí∞', f'–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {Balance} /// –°–∫–æ—Ä–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: {Speed}')


                    Waiting = randint(18_000, 21_000) # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
                    Waiting_STR = (datetime.now() + timedelta(seconds=Waiting)).strftime('%Y-%m-%d %H:%M:%S') # –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ

                    self.Logging('Warning', self.Name, '‚è≥', f'–°–ª–µ–¥—É—é—â–∏–π —Å—Ç–∞—Ä—Ç —Å–±–æ—Ä–∞ –º–æ–Ω–µ—Ç: {Waiting_STR}!')

                    sleep(Waiting) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 5 –¥–æ 6 —á–∞—Å–æ–≤

                else: # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É—Å–ø–µ—à–Ω–∞
                    self.Logging('Error', self.Name, 'üî¥', '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏!')
                    sleep(randint(33, 66)) # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 33 –¥–æ 66 —Å–µ–∫—É–Ω–¥
            except:
                pass







if __name__ == '__main__':
    sys('cls') if s_name() == 'Windows' else sys('clear')

    Console_Lock = Lock()
    Proxy = HPV_Proxy_Checker()

    def Start_Thread(Account, URL, Proxy = None):
        PocketFi = HPV_PocketFi(Account, URL, Proxy)
        PocketFi.Run()

    if Proxy:
        DIVIDER = Fore.BLACK + ' | '
        Time = Fore.BLUE + f'{datetime.now().strftime("%Y-%m-%d %H:%M:%S")}'
        Text = Fore.GREEN + f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –æ–∫–æ–Ω—á–µ–Ω–∞! –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–µ: {len(Proxy)}'
        print(Time + DIVIDER + 'üåê' + DIVIDER + Text)
        sleep(5)

    for Account, URL in HPV_Get_Accounts().items():
        if Proxy:
            Proxy = cycle(Proxy)
            Thread(target=Start_Thread, args=(Account, URL, next(Proxy),)).start()
        else:
            Thread(target=Start_Thread, args=(Account, URL,)).start()


